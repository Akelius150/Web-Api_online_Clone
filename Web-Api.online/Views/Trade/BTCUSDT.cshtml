@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@{
    ViewData["Title"] = "Web-Api.online";
}

<div class="text-center">
    <h1 class="display-4">BTC - USDT</h1>
</div>

<div class="row">
    <div class="col-12">
        <hr />
    </div>
</div>

<div class="row">
    <div class="col-md-4">
        <div class="orderbook-wrap">
            <div class="orderbook">
                <div class="orderbook-header"></div>
                <div class="orderbook-tbheader">
                    <div class="orderbook-tbheader-col">Price(USDT)</div>
                    <div class="orderbook-tbheader-col">Amount(BTC)</div>
                    <div class="orderbook-tbheader-col">Total</div>
                </div>
                <div class="orderbook-container">
                    <div class="orderbook-list orderbook-list-asks orderbook-asks">
                    </div>
                    <div class="orderbook-ticker">
                        <div class="orderbook-ticker-status status-buy">
                            <span class="current-price">0</span>
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" class="arrow-icon" style="transform: rotate(180deg);"><path d="M5 13.47l1.41-1.41 5.1 5.1V3h1.99v14.15l5.09-5.09L20 13.47l-7.5 7.5-7.5-7.5z" fill="currentColor"></path></svg>
                        </div>
                        <div class="orderbook-ticker-markprice">$6.24</div>
                        <a href="#" target="_blank" class="orderbook-ticker-more">
                            Больше
                            <svg width="16" height="12" viewBox="0 0 16 12" fill="none" xmlns="http://www.w3.org/2000/svg"><rect y="7" width="2.66667" height="5" fill="#00C582"></rect><rect x="4.44446" y="4" width="2.66667" height="8" fill="#00C582"></rect><rect x="8.88892" y="2" width="2.66667" height="10" fill="#00C582"></rect><rect x="13.3333" width="2.66667" height="12" fill="#00C582"></rect></svg>
                        </a>
                    </div>
                </div>
            </div>
            <div class="orderbook">
                <div class="orderbook-container">
                    <div class="orderbook-list orderbook-list-bids orderbook-bids">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-4">
        <div class="text-wrap">
            @if (SignInManager.IsSignedIn(User))
            {
                <ul>
                    <li class="nav-item">
                        <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @User.Identity.Name!</a>
                    </li>
                    <li class="nav-item">
                        BTC balance: @Model.BtcWallet.Value Address: @Model.BtcWallet.Address
                    </li>
                    <li class="nav-item">
                        USDT balance: @Model.UsdtWallet.Value Address: @Model.UsdtWallet.Address
                    </li>
                </ul>

                <div class="container">
                    <div class="row">&nbsp;</div>
                    <div class="row">
                        <div class="col-2">Count</div>
                        <div class="col-4"><input type="text" id="amountInput" /></div>
                    </div>
                    <div class="row">
                        <div class="col-2">Price</div>
                        <div class="col-4"><input type="text" id="priceInput" /></div>
                    </div>
                    <div class="row">&nbsp;</div>
                    <div class="row">
                        <div class="col-6">
                            <input type="button" id="buyButton" value="Buy" />
                            <input type="button" id="sellButton" value="Sell" />
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="row">
            <div id="simple-candlestick" class="apex-charts" data-colors="#0acf97,#fa5c7c"></div>
        </div>
    </div>
    <div class="col-4 text-right">
        <div class="orderbook">
            <div class="orderbook-header">
                <div class="orderbook-header-col">Market Trades</div>
            </div>
            <div class="orderbook-tbheader">
                <div class="orderbook-tbheader-col">Price(USDT)</div>
                <div class="orderbook-tbheader-col">Amount(BTC)</div>
                <div class="orderbook-tbheader-col">Time</div>
            </div>
            <div class="orderbook-container">
                <div class="orderbook-list orderbook-list-bids">
                </div>
            </div>
        </div>
        <div class="orderbook">
            <div class="orderbook-header">
                <div class="orderbook-header-col">Open Trades</div>
            </div>
            <div class="orderbook-tbheader">
                <div class="orderbook-tbheader-col">Price(USDT)</div>
                <div class="orderbook-tbheader-col">Amount(BTC)</div>
                <div class="orderbook-tbheader-col">Time</div>
                <div class="orderbook-tbheader-col"></div>
            </div>
            <div class="orderbook-container">
                <div class="orderbook-list orderbook-list-bids">

                </div>
            </div>
        </div>
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.6.0.js" integrity="sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=" crossorigin="anonymous"></script>
<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/site.js"></script>
<script src="~/js/vendor/d3.min.js"></script>
<script src="~/js/btcusdthub.js?3"></script>
<script src="~/js/vendor/apexcharts.min.js"></script>
<script>

    $(document).ready(function () {

        document.getElementById("buyButton").addEventListener("click", function (event) {
            var amount = document.getElementById("amountInput").value;
            var price = document.getElementById("priceInput").value;

            $.ajax({
                url: '/trade/createorder',
                type: 'POST',
                data: JSON.stringify({
                    Price: price,
                    Amount: amount,
                    IsBuy: true
                }),
                contentType: 'application/json; charset=utf-8'
            });
        });

        document.getElementById("sellButton").addEventListener("click", function (event) {
            var amount = document.getElementById("amountInput").value;
            var price = document.getElementById("priceInput").value;

            $.ajax({
                url: '/trade/createorder',
                type: 'POST',
                data: JSON.stringify({
                    Price: price,
                    Amount: amount,
                    IsBuy: false
                }),
                contentType: 'application/json; charset=utf-8'
            });
        });


        var model = @Html.Raw(Json.Serialize(Model));
        var userOpenOrders = model.userOpenOrders;
        var buyOpenOrders = model.buyOrderBook
        var sellOpenOrders = model.sellOrderBook
        var marketTrades = model.marketTrades

        var currentMarketTradeDoc = document.getElementsByClassName("orderbook-ticker-status")[0];
        if(marketTrades.length > 0){
            currentMarketTradeDoc.children[0].innerHTML = marketTrades[0].exposedPrice;

            currentMarketTradeDoc.classList.remove('status-buy');
            currentMarketTradeDoc.classList.remove('status-sell');
            currentMarketTradeDoc.classList.add((marketTrades[0].isBuy ? 'status-buy' : 'status-sell'));

            currentMarketTradeDoc.children[1].style.transform = (marketTrades[0].isBuy ? 'rotate(180deg)' : 'rotate(360deg)');
        }

        loadOrderBook(buyOpenOrders, true, true);
        loadOrderBook(sellOpenOrders, true, false);
        loadMarketTrades(marketTrades, true);
        loadUserOpenOrders(userOpenOrders, true);


        $.get("/candlestick/getcandlestick", function (data) {

            var seriesData = []
            if (data.lastCandleSticks != null) {
                data.lastCandleSticks.forEach(candleStick => {
                    seriesData.push({
                        x: candleStick.closeTime,
                        y: [candleStick.open, candleStick.high, candleStick.low, candleStick.close]
                    })
                });
            }

            if (data.currentCandleStick != null) {
                seriesData.push({
                    x: data.currentCandleStick.closeTime,
                    y: [data.currentCandleStick.open, data.currentCandleStick.high, data.currentCandleStick.low, data.currentCandleStick.close]
                });
            }

            var colors = ["#0acf97", "#fa5c7c"];
            var dataColors = $("#simple-candlestick").data('colors');
            if (dataColors) {
                colors = dataColors.split(",");
            }
            var options = {
                chart: {
                    animations: {
                        enabled: false
                    },
                    height: 400,
                    type: 'candlestick',
                },
                plotOptions: {
                    candlestick: {
                        colors: {
                            upward: colors[0],
                            downward: colors[1]
                        }
                    }
                },
                series: [{
                    data: seriesData
                }],
                xaxis: {
                    type: 'datetime'
                },
                yaxis: {
                    tooltip: {
                        enabled: true
                    }
                }
            }

            var chart = new ApexCharts(
                document.querySelector("#simple-candlestick"),
                options
            );

            chart.render();

            let lastPrice = 0;

            if (data.currentCandleStick != null) {
                var currentMarketTradeDoc = document.getElementsByClassName("orderbook-ticker-status")[0];

                var currentHigh = data.currentCandleStick.high;
                var currentLow = data.currentCandleStick.low;
                var currentOpen = data.currentCandleStick.open;
                var currentClose = data.currentCandleStick.close;
                var currentCloseDate = new Date(Date.parse(data.currentCandleStick.closeTime));

                $(".current-price").on('DOMSubtreeModified', function (changedNode) {

                    if (changedNode.currentTarget.firstChild != null) {
                        var price = changedNode.currentTarget.firstChild.data;

                        var newSeries = []

                        if (price != lastPrice) {

                            var high = currentHigh < price ? price : currentHigh;
                            var low = currentLow > price ? price : currentLow;

                            var lastZoom = chart.zoom;

                            if (currentCloseDate > (new Date())) {

                                seriesData.pop();

                                seriesData.push({
                                    x: currentCloseDate,
                                    y: [currentOpen, high, low, price]
                                });

                                chart.updateSeries([{
                                    data: seriesData
                                }]);

                                currentHigh = high;
                                currentLow = low;
                                currentClose = price;
                            } else {
                                currentCloseDate = new Date(new Date(currentCloseDate).getTime() + 60000);
                                currentLow = price;
                                currentHigh = price;
                                currentClose = price;
                                currentClose = price;

                                seriesData.push({
                                    x: currentCloseDate.setTime(new Date(currentCloseDate).getTime() + 60000),
                                    y: [price, price, price, price]
                                });

                                chart.appendSeries({
                                    data: newSeries
                                });


                            }

                            chart.zoomX(lastZoom);

                            lastPrice = price;
                        }
                    }
                });
            }

        });

    });

</script>

<script>

</script>

